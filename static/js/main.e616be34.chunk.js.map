{"version":3,"sources":["data/values.js","components/App.js","serviceWorker.js","index.js"],"names":["WATER","max","min","SLEEP","CALORIES","goal","BMI","obese","overweight","normal","EXCERCISE","SODIUM","limit","SUGAR","SCREENTIME","Object","freeze","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","cupsOfWater","hoursOfSleep","dailyCalories","bmi","minutesOfExcercise","teaspoonsOfSugar","sodiumMilligrams","screenTime","state","height","weight","updateWater","bind","assertThisInitialized","updateSleep","updateCalories","updateHeight","updateWeight","updateExcercise","updateMilligrams","updateSugar","updateScreenTime","handleSubmit","event","setState","target","value","e","preventDefault","forceUpdate","Math","pow","toFixed","react_default","a","createElement","className","type","onChange","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e616be34.chunk.js","sourcesContent":["export const WATER = {\n  max: 24,\n  min: 8\n}; //Cups\nexport const SLEEP = {\n  max: 10,\n  min: 7\n}; //Hours\nexport const CALORIES = {\n   goal: 2000 \n};\nexport const BMI = { obese: 30, overweight: 25, normal: 18.5 };\nexport const EXCERCISE = { goal: 30 }; //Minutes\nexport const SODIUM = { limit: 2300 }; //Milligrams\nexport const SUGAR = { limit: 6 }; //Teaspoons\nexport const SCREENTIME = { limit: 2 }; //Hours\n\n//Freeze our enums\nObject.freeze(WATER);\nObject.freeze(SLEEP);\nObject.freeze(CALORIES);\nObject.freeze(BMI);\nObject.freeze(EXCERCISE);\nObject.freeze(SODIUM);\nObject.freeze(SUGAR);\nObject.freeze(SCREENTIME);\n","import React, { Component } from \"react\";\nimport \"../styles/App.css\";\nimport {\n  WATER,\n  SLEEP,\n  CALORIES,\n  BMI,\n  EXCERCISE,\n  SODIUM,\n  SUGAR,\n  SCREENTIME\n} from \"../data/values\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    //Variables to be displayed\n    this.cupsOfWater = \"\";\n    this.hoursOfSleep = \"\";\n    this.dailyCalories = \"\";\n    this.bmi = \"\";\n    this.minutesOfExcercise = \"\";\n    this.teaspoonsOfSugar = \"\";\n    this.sodiumMilligrams = \"\";\n    this.screenTime = \"\";\n\n    //Variables for user input\n    this.state = {\n      cupsOfWater: 0,\n      hoursOfSleep: 0,\n      dailyCalories: 0,\n      height: 0,\n      weight: 0,\n      minutesOfExcercise: 0,\n      sodiumMilligrams: 0,\n      teaspoonsOfSugar: 0,\n      screenTime: 0\n    };\n\n    this.updateWater = this.updateWater.bind(this);\n    this.updateSleep = this.updateSleep.bind(this);\n    this.updateCalories = this.updateCalories.bind(this);\n    this.updateHeight = this.updateHeight.bind(this);\n    this.updateWeight = this.updateWeight.bind(this);\n    this.updateExcercise = this.updateExcercise.bind(this);\n    this.updateMilligrams = this.updateMilligrams.bind(this);\n    this.updateSugar = this.updateSugar.bind(this);\n    this.updateScreenTime = this.updateScreenTime.bind(this);\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  updateWater(event) {\n    this.setState({ cupsOfWater: event.target.value });\n  }\n  updateSleep(event) {\n    this.setState({ hoursOfSleep: event.target.value });\n  }\n  updateCalories(event) {\n    this.setState({ dailyCalories: event.target.value });\n  }\n  updateHeight(event) {\n    this.setState({ height: event.target.value });\n  }\n  updateWeight(event) {\n    this.setState({ weight: event.target.value });\n  }\n  updateExcercise(event) {\n    this.setState({ minutesOfExcercise: event.target.value });\n  }\n  updateMilligrams(event) {\n    this.setState({ sodiumMilligrams: event.target.value });\n  }\n  updateSugar(event) {\n    this.setState({ teaspoonsOfSugar: event.target.value });\n  }\n  updateScreenTime(event) {\n    this.setState({ screenTime: event.target.value });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.forceUpdate();\n\n    // Check if we had enough water\n    if (\n      this.state.cupsOfWater >= WATER.min &&\n      this.state.cupsOfWater < WATER.max\n    ) {\n      //We had at least 8 cups of water\n      this.cupsOfWater =\n        this.state.cupsOfWater + \" Cups is healthy\";\n    } else if (this.state.cupsOfWater >= WATER.max) {\n      this.cupsOfWater =\n        this.state.cupsOfWater + \" Cups is too much\";\n    } else {\n      //We had less than 8 cups of water\n      this.cupsOfWater =\n        this.state.cupsOfWater + \" Cup(s) is not enough\";\n    }\n\n    // Check if we had enough sleep\n    if (\n      this.state.hoursOfSleep >= SLEEP.min &&\n      this.state.hoursOfSleep <= SLEEP.max\n    ) {\n      this.hoursOfSleep = this.state.hoursOfSleep + \" Hours is healthy\";\n    } else if (this.state.hoursOfSleep > SLEEP.max) {\n      this.hoursOfSleep =\n        this.state.hoursOfSleep + \" Hours is too much\";\n    } else {\n      this.hoursOfSleep =\n        this.state.hoursOfSleep + \" Hour(s) is not enough\";\n    }\n\n    // Check amount of calories\n    if(this.state.dailyCalories >= CALORIES.goal){\n      this.dailyCalories = \"Consuming \"+ this.state.dailyCalories +\" would lead to weight gain\"\n    } else {\n      this.dailyCalories = \"Consuming \"+ this.state.dailyCalories +\" would lead to weight loss\"\n    }\n\n    // Check BMI\n    // [weight (lb) / height (in) / height (in)] x 703\n    let bmi = (this.state.weight / Math.pow(this.state.height, 2)) * 703;\n    bmi = bmi.toFixed(2)\n\n    // eslint-disable-next-line default-case\n    switch (true) {\n      case bmi >= BMI.obese:\n        this.bmi = \"A BMI of \"+bmi + \" is considered obese\";\n        break;\n      case bmi < BMI.obese && bmi >= BMI.overweight:\n        this.bmi = \"A BMI of \"+bmi + \" is considered overweight\";\n        break;\n      case bmi < BMI.overweight && bmi >= BMI.normal:\n        this.bmi = \"A BMI of \"+bmi + \" is considered healthy\";\n        break;\n      case bmi < BMI.normal:\n        this.bmi = \"A BMI of \"+bmi + \" is considered underweight\";\n        break;\n    }\n\n    // Check excercise\n    if (this.state.minutesOfExcercise >= EXCERCISE.goal) {\n      this.minutesOfExcercise =\n        this.state.minutesOfExcercise + \" minutes is good\";\n    } else {\n      this.minutesOfExcercise =\n        this.state.minutesOfExcercise +\n        \" minute(s) is not enough\";\n    }\n    // Check amount of sodium\n    if (this.state.sodiumMilligrams >= SODIUM.limit) {\n      this.sodiumMilligrams =\n        this.state.sodiumMilligrams + \"mg of sodium is too much.\";\n    } else {\n      this.sodiumMilligrams =\n        this.state.sodiumMilligrams +\n        \"mg of sodium is healthy.\";\n    }\n    // Check sugar\n    if (this.state.teaspoonsOfSugar >= SUGAR.limit) {\n      this.teaspoonsOfSugar =\n        this.state.teaspoonsOfSugar +\n        \" tsp is too much.\";\n    } else {\n      this.teaspoonsOfSugar =\n        this.state.teaspoonsOfSugar +\n        \" tsps is healthy\";\n    }\n\n    // Check screen time\n    if (this.state.screenTime > SCREENTIME.limit) {\n      this.screenTime = this.state.screenTime + \" hrs. is too much\";\n    } else {\n      this.screenTime = this.state.screenTime + \" hrs. is healthy\";\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <form>\n            <h1>Health Track</h1>\n            <h5>\n              Enter Information Below to help determine what daily habits may\n              say about your health\n            </h5>\n            <hr className=\"sep\" />\n            <div className=\"row\">\n              <div className=\"group\">\n                <input\n                  type=\"number\"\n                  value={this.state.cupsOfWater}\n                  onChange={this.updateWater}\n                  min=\"0\"\n                />\n                <span className=\"highlight\" />\n                <span className=\"bar\" />\n                <label>Cups of Water per Day</label>\n              </div>\n              <div className=\"group output\">\n                <p>{this.cupsOfWater}</p>\n                <span className=\"highlight\" />\n                <span className=\"bar\" />\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"group\">\n                <input\n                  type=\"number\"\n                  value={this.state.hoursOfSleep}\n                  onChange={this.updateSleep}\n                  min=\"0\"\n                />\n                <span className=\"highlight\" />\n                <span className=\"bar\" />\n                <label>Hours of Sleep</label>\n              </div>\n              <div className=\"group output\">\n                <p>{this.hoursOfSleep}</p>\n                <span className=\"highlight\" />\n                <span className=\"bar\" />\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"group\">\n                <input\n                  type=\"number\"\n                  value={this.state.dailyCalories}\n                  onChange={this.updateCalories}\n                  min=\"0\"\n                />\n                <span className=\"highlight\" />\n                <span className=\"bar\" />\n                <label>Calories per Day</label>\n              </div>\n              <div className=\"group output\">\n                <p>{this.dailyCalories}</p>\n                <span className=\"highlight\" />\n                <span className=\"bar\" />\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"group\">\n                <input\n                  className=\"half\"\n                  type=\"number\"\n                  value={this.state.height}\n                  onChange={this.updateHeight}\n                  min=\"0\"\n                />\n                <span className=\"highlight half\" />\n                <span className=\"halfbar\" />\n                <label>Height (in.)</label>\n              </div>\n              <div className=\"group\">\n                <input\n                  className=\"half\"\n                  type=\"number\"\n                  value={this.state.weight}\n                  onChange={this.updateWeight}\n                  min=\"0\"\n                />\n                <span className=\"highlight half\" />\n                <span className=\"halfbar\" />\n                <label>Weight (lbs.)</label>\n              </div>\n              <div className=\"group output\">\n                <p>{this.bmi}</p>\n                <span className=\"highlight\" />\n                <span className=\"bar\" />\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"group\">\n                <input\n                  type=\"number\"\n                  value={this.state.minutesOfExcercise}\n                  onChange={this.updateExcercise}\n                  min=\"0\"\n                />\n                <span className=\"highlight\" />\n                <span className=\"bar\" />\n                <label>Minutes of Excercise per Day</label>\n              </div>\n              <div className=\"group output\">\n                <p>{this.minutesOfExcercise}</p>\n                <span className=\"highlight\" />\n                <span className=\"bar\" />\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"group\">\n                <input\n                  type=\"number\"\n                  value={this.state.sodiumMilligrams}\n                  onChange={this.updateMilligrams}\n                  min=\"0\"\n                />\n                <span className=\"highlight\" />\n                <span className=\"bar\" />\n                <label>Milligrams of Sodium per Day</label>\n              </div>\n              <div className=\"group output\">\n                <p>{this.sodiumMilligrams}</p>\n                <span className=\"highlight\" />\n                <span className=\"bar\" />\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"group\">\n                <input\n                  type=\"number\"\n                  value={this.state.teaspoonsOfSugar}\n                  onChange={this.updateSugar}\n                  min=\"0\"\n                />\n                <span className=\"highlight\" />\n                <span className=\"bar\" />\n                <label>Teaspoons of Sugar per Day</label>\n              </div>\n              <div className=\"group output\">\n                <p>{this.teaspoonsOfSugar}</p>\n                <span className=\"highlight\" />\n                <span className=\"bar\" />\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"group\">\n                <input\n                  type=\"number\"\n                  value={this.state.screenTime}\n                  onChange={this.updateScreenTime}\n                  min=\"0\"\n                />\n                <span className=\"highlight\" />\n                <span className=\"bar\" />\n                <label>Hours of Screen Time per Day</label>\n              </div>\n              <div className=\"group output\">\n                <p>{this.screenTime}</p>\n                <span className=\"highlight\" />\n                <span className=\"bar\" />\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"btn-box\">\n                <button className=\"btn btn-submit\" onClick={this.handleSubmit}>\n                  submit\n                </button>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}